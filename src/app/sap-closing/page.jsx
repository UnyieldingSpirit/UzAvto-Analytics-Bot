// app/sap-closing/page.jsx
"use client";

import { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useThemeStore } from '../../store/theme';
import { useLanguageStore } from '../../store/language';
import { useTranslation } from '../../hooks/useTranslation';
import { sapClosingTranslations } from './translations';
import * as d3 from 'd3';
import { 
  Calendar,
  Clock,
  CheckCircle,
  AlertCircle,
  XCircle,
  Timer,
  TrendingUp,
  TrendingDown,
  Filter,
  Download,
  RefreshCw,
  Search,
  Loader2,
  Building2,
  User,
  CalendarDays,
  AlertTriangle,
  PlayCircle,
  CheckCircle2,
  XOctagon,
  PauseCircle,
  ArrowUpDown,
  ChevronUp,
  ChevronDown,
  Activity,
  Zap,
  Target,
  Award,
  Sparkles,
  BarChart3,
  PieChart,
  Users,
  Briefcase,
  Package,
  Cpu,
  DollarSign,
  ShoppingCart
} from 'lucide-react';

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
const generateMockTasks = () => {
  const departments = [
    { id: 'PROD', name: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', color: '#3b82f6', icon: <Cpu size={20} /> },
    { id: 'FIN', name: '–§–∏–Ω–∞–Ω—Å—ã', color: '#10b981', icon: <DollarSign size={20} /> },
    { id: 'LOG', name: '–õ–æ–≥–∏—Å—Ç–∏–∫–∞', color: '#f59e0b', icon: <Package size={20} /> },
    { id: 'IT', name: '–ò–¢', color: '#8b5cf6', icon: <Cpu size={20} /> },
    { id: 'HR', name: '–ü–µ—Ä—Å–æ–Ω–∞–ª', color: '#ec4899', icon: <Users size={20} /> },
    { id: 'SALES', name: '–ü—Ä–æ–¥–∞–∂–∏', color: '#06b6d4', icon: <ShoppingCart size={20} /> }
  ];
  
  const taskTemplates = [
    '–ó–∞–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–∏–≥–∏',
    '–°–≤–µ—Ä–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤',
    '–û—Ç—Ä–∞–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
    '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π COGI',
    '–†–∞—Å—á–µ—Ç –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏',
    '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
    '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞',
    '–£—á–µ—Ç –ù–ó–ü',
    '–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–±–∏—Ç–æ—Ä—Å–∫–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏',
    '–£—á–µ—Ç –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–∑–Ω–∏—Ü',
    '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤',
    '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è',
    '–°–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫',
    '–ó–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
    '–£—á–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤',
    '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
    '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤',
    '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤',
    '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö',
    '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤',
    '–†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã',
    '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–Ω—ã—Ö',
    '–£—á–µ—Ç –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤',
    '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–µ–ª—è',
    '–†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —Å –§–û–¢',
    '–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø—Ä–æ–¥–∞–∂',
    '–£—á–µ—Ç —Å–∫–∏–¥–æ–∫ –∏ –±–æ–Ω—É—Å–æ–≤',
    '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö',
    '–°–≤–µ—Ä–∫–∞ —Å –¥–∏–ª–µ—Ä–∞–º–∏',
    '–†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã—Ö'
  ];
  
  const executors = [
    { name: '–ò–≤–∞–Ω–æ–≤ –ê.–ê.', avatar: 'üë®‚Äçüíº', rating: 4.8 },
    { name: '–ü–µ—Ç—Ä–æ–≤–∞ –ú.–°.', avatar: 'üë©‚Äçüíº', rating: 4.5 },
    { name: '–°–∏–¥–æ—Ä–æ–≤ –í.–ü.', avatar: 'üë®‚Äçüîß', rating: 4.2 },
    { name: '–ö–æ–∑–ª–æ–≤–∞ –ï.–ò.', avatar: 'üë©‚Äçüî¨', rating: 4.9 },
    { name: '–ù–∏–∫–æ–ª–∞–µ–≤ –î.–ö.', avatar: 'üë®‚Äçüíª', rating: 4.6 },
    { name: '–°–º–∏—Ä–Ω–æ–≤–∞ –û.–í.', avatar: 'üë©‚Äçüè´', rating: 4.7 },
    { name: '–ú–æ—Ä–æ–∑–æ–≤ –°.–ê.', avatar: 'üë®‚Äçüè≠', rating: 4.3 },
    { name: '–í–æ–ª–∫–æ–≤–∞ –ù.–î.', avatar: 'üë©‚Äçüíª', rating: 4.8 },
    { name: '–ö—É–∑–Ω–µ—Ü–æ–≤ –ü.–ò.', avatar: 'üë®‚Äçüéì', rating: 4.4 },
    { name: '–õ–µ–±–µ–¥–µ–≤–∞ –ê.–°.', avatar: 'üë©‚Äçüé®', rating: 4.9 }
  ];
  
  const tasks = [];
  const now = new Date();
  const currentYear = now.getFullYear();
  const currentMonth = now.getMonth() + 1;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  const statusDistribution = {
    completed: 35,
    inProgress: 25,
    waiting: 20,
    problems: 20
  };
  
  let taskId = 1;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  for (let i = 0; i < statusDistribution.completed; i++) {
    const dept = departments[Math.floor(Math.random() * departments.length)];
    const executor = executors[Math.floor(Math.random() * executors.length)];
    const plannedDays = 1 + Math.floor(Math.random() * 5);
    const actualDays = plannedDays + Math.floor((Math.random() - 0.5) * 2);
    const priority = Math.random() > 0.7 ? 'high' : Math.random() > 0.4 ? 'medium' : 'low';
    
    tasks.push({
      id: `TASK-${String(taskId++).padStart(4, '0')}`,
      name: taskTemplates[Math.floor(Math.random() * taskTemplates.length)],
      department: dept.name,
      departmentId: dept.id,
      departmentColor: dept.color,
      departmentIcon: dept.icon,
      executor: executor.name,
      executorAvatar: executor.avatar,
      executorRating: executor.rating,
      plannedStart: `01.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      plannedEnd: `${String(plannedDays).padStart(2, '0')}.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      actualStart: `01.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      actualEnd: `${String(actualDays).padStart(2, '0')}.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      status: 'completed',
      statusName: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
      progress: 100,
      deviation: (actualDays - plannedDays) * 24,
      completedDate: `${String(actualDays).padStart(2, '0')}.${String(currentMonth).padStart(2, '0')}.${currentYear} ${8 + Math.floor(Math.random() * 10)}:${String(Math.floor(Math.random() * 60)).padStart(2, '0')}`,
      priority,
      duration: plannedDays * 24
    });
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
  for (let i = 0; i < statusDistribution.inProgress; i++) {
    const dept = departments[Math.floor(Math.random() * departments.length)];
    const executor = executors[Math.floor(Math.random() * executors.length)];
    const progress = 20 + Math.floor(Math.random() * 70);
    const plannedDays = 3 + Math.floor(Math.random() * 7);
    const priority = Math.random() > 0.8 ? 'critical' : Math.random() > 0.5 ? 'high' : 'medium';
    
    tasks.push({
      id: `TASK-${String(taskId++).padStart(4, '0')}`,
      name: taskTemplates[Math.floor(Math.random() * taskTemplates.length)],
      department: dept.name,
      departmentId: dept.id,
      departmentColor: dept.color,
      departmentIcon: dept.icon,
      executor: executor.name,
      executorAvatar: executor.avatar,
      executorRating: executor.rating,
      plannedStart: `01.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      plannedEnd: `${String(plannedDays).padStart(2, '0')}.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      actualStart: `01.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      actualEnd: '',
      status: 'inProgress',
      statusName: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
      progress,
      deviation: 0,
      startedBy: executors[Math.floor(Math.random() * executors.length)].name,
      estimatedCompletion: `${String(plannedDays + 1).padStart(2, '0')}.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      priority,
      duration: plannedDays * 24,
      velocity: progress > 50 ? 'fast' : progress > 30 ? 'normal' : 'slow'
    });
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
  for (let i = 0; i < statusDistribution.waiting; i++) {
    const dept = departments[Math.floor(Math.random() * departments.length)];
    const executor = executors[Math.floor(Math.random() * executors.length)];
    const plannedDays = 5 + Math.floor(Math.random() * 10);
    const waitingReasons = [
      '–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏',
      '–û–∂–∏–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –æ—Ç–¥–µ–ª–∞',
      '–û–∂–∏–¥–∞–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞',
      '–û–∂–∏–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã',
      '–û–∂–∏–¥–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ'
    ];
    const priority = Math.random() > 0.6 ? 'high' : 'medium';
    
    tasks.push({
      id: `TASK-${String(taskId++).padStart(4, '0')}`,
      name: taskTemplates[Math.floor(Math.random() * taskTemplates.length)],
      department: dept.name,
      departmentId: dept.id,
      departmentColor: dept.color,
      departmentIcon: dept.icon,
      executor: executor.name,
      executorAvatar: executor.avatar,
      executorRating: executor.rating,
      plannedStart: `${String(plannedDays - 2).padStart(2, '0')}.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      plannedEnd: `${String(plannedDays).padStart(2, '0')}.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      actualStart: '',
      actualEnd: '',
      status: 'waiting',
      statusName: '–û–∂–∏–¥–∞–Ω–∏–µ',
      progress: 0,
      deviation: 0,
      waitingReason: waitingReasons[Math.floor(Math.random() * waitingReasons.length)],
      blockedSince: `${String(plannedDays - 3).padStart(2, '0')}.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      priority,
      duration: plannedDays * 24,
      waitingDays: 3 + Math.floor(Math.random() * 5)
    });
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
  for (let i = 0; i < statusDistribution.problems; i++) {
    const dept = departments[Math.floor(Math.random() * departments.length)];
    const executor = executors[Math.floor(Math.random() * executors.length)];
    const plannedDays = 2 + Math.floor(Math.random() * 5);
    const problemTypes = [
      { type: 'error', name: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', description: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö', severity: 'high' },
      { type: 'blocked', name: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', description: '–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π', severity: 'medium' },
      { type: 'failed', name: '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', description: '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π', severity: 'critical' },
      { type: 'timeout', name: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏', description: '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ', severity: 'medium' }
    ];
    
    const problem = problemTypes[Math.floor(Math.random() * problemTypes.length)];
    const priority = problem.severity === 'critical' ? 'critical' : 'high';
    
    tasks.push({
      id: `TASK-${String(taskId++).padStart(4, '0')}`,
      name: taskTemplates[Math.floor(Math.random() * taskTemplates.length)],
      department: dept.name,
      departmentId: dept.id,
      departmentColor: dept.color,
      departmentIcon: dept.icon,
      executor: executor.name,
      executorAvatar: executor.avatar,
      executorRating: executor.rating,
      plannedStart: `01.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      plannedEnd: `${String(plannedDays).padStart(2, '0')}.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      actualStart: `01.${String(currentMonth).padStart(2, '0')}.${currentYear}`,
      actualEnd: '',
      status: 'problems',
      statusName: problem.name,
      progress: 10 + Math.floor(Math.random() * 40),
      deviation: plannedDays * 24,
      problemType: problem.type,
      problemDescription: problem.description,
      problemSeverity: problem.severity,
      failedAt: `${String(plannedDays).padStart(2, '0')}.${String(currentMonth).padStart(2, '0')}.${currentYear} ${Math.floor(Math.random() * 24)}:${String(Math.floor(Math.random() * 60)).padStart(2, '0')}`,
      priority,
      duration: plannedDays * 24,
      attempts: 1 + Math.floor(Math.random() * 3)
    });
  }
  
  return tasks;
};

export default function SAPClosingPage() {
  const [tasks, setTasks] = useState([]);
  const [activeTab, setActiveTab] = useState('completed');
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDepartment, setSelectedDepartment] = useState('all');
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });
  const [showStats, setShowStats] = useState(true);
  
  const chartRef = useRef(null);
  const pieChartRef = useRef(null);
  const progressChartRef = useRef(null);
  
  const { mode } = useThemeStore();
  const isDark = mode === 'dark';
  const { currentLocale } = useLanguageStore();
  const { t } = useTranslation(sapClosingTranslations);
  
  // –¶–≤–µ—Ç–∞ —Ç–µ–º—ã
  const colors = {
    background: isDark ? '#0f172a' : '#ffffff',
    cardBg: isDark ? '#1e293b' : '#f8fafc',
    text: isDark ? '#f1f5f9' : '#1e293b',
    textSecondary: isDark ? '#94a3b8' : '#64748b',
    border: isDark ? '#334155' : '#e2e8f0',
    success: '#10b981',
    warning: '#f59e0b',
    error: '#ef4444',
    info: '#3b82f6',
    primary: '#6366f1',
    purple: '#8b5cf6',
    pink: '#ec4899',
    cyan: '#06b6d4'
  };
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–±–æ–≤ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
  const tabs = [
    {
      id: 'completed',
      name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
      icon: <CheckCircle2 size={20} />,
      color: colors.success,
      description: '–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
      bgGradient: 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
    },
    {
      id: 'inProgress',
      name: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
      icon: <Timer size={20} />,
      color: colors.info,
      description: '–ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ',
      bgGradient: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)'
    },
    {
      id: 'waiting',
      name: '–û–∂–∏–¥–∞–Ω–∏–µ',
      icon: <PauseCircle size={20} />,
      color: colors.warning,
      description: '–ó–∞–¥–∞—á–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–π',
      bgGradient: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)'
    },
    {
      id: 'problems',
      name: '–ü—Ä–æ–±–ª–µ–º—ã',
      icon: <XOctagon size={20} />,
      color: colors.error,
      description: '–ó–∞–¥–∞—á–∏ —Å –æ—à–∏–±–∫–∞–º–∏',
      bgGradient: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)'
    }
  ];
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      try {
        await new Promise(resolve => setTimeout(resolve, 1000));
        const mockData = generateMockTasks();
        setTasks(mockData);
      } catch (error) {
        console.error('Error loading data:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    loadData();
  }, []);
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
  const getFilteredTasks = () => {
    let filtered = tasks.filter(task => {
      if (activeTab === 'completed') return task.status === 'completed';
      if (activeTab === 'inProgress') return task.status === 'inProgress';
      if (activeTab === 'waiting') return task.status === 'waiting';
      if (activeTab === 'problems') return task.status === 'problems';
      return true;
    });
    
    if (selectedDepartment !== 'all') {
      filtered = filtered.filter(task => task.departmentId === selectedDepartment);
    }
    
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(task =>
        task.name.toLowerCase().includes(query) ||
        task.executor.toLowerCase().includes(query) ||
        task.department.toLowerCase().includes(query)
      );
    }
    
    if (sortConfig.key) {
      filtered.sort((a, b) => {
        let aVal = a[sortConfig.key];
        let bVal = b[sortConfig.key];
        
        if (typeof aVal === 'string') {
          aVal = aVal.toLowerCase();
          bVal = bVal.toLowerCase();
        }
        
        if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;
        if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;
        return 0;
      });
    }
    
    return filtered;
  };
  
  const filteredTasks = getFilteredTasks();
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const handleSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const statistics = {
    total: tasks.length,
    completed: tasks.filter(t => t.status === 'completed').length,
    inProgress: tasks.filter(t => t.status === 'inProgress').length,
    waiting: tasks.filter(t => t.status === 'waiting').length,
    problems: tasks.filter(t => t.status === 'problems').length,
    completionRate: tasks.length > 0 ? (tasks.filter(t => t.status === 'completed').length / tasks.length * 100).toFixed(1) : 0,
    avgDeviation: tasks.filter(t => t.deviation).reduce((sum, t) => sum + Math.abs(t.deviation), 0) / tasks.filter(t => t.deviation).length || 0,
    criticalTasks: tasks.filter(t => t.priority === 'critical').length,
    performanceScore: tasks.length > 0 ? 
      ((tasks.filter(t => t.status === 'completed' && t.deviation <= 0).length / tasks.length) * 100).toFixed(1) : 0
  };
  
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
  useEffect(() => {
    if (!isLoading && tasks.length > 0) {
      renderProgressChart();
      renderPieChart();
      renderBarChart();
    }
  }, [tasks, isDark, currentLocale, activeTab]);
  
  // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
  const renderProgressChart = () => {
    if (!progressChartRef.current) return;
    
    const container = d3.select(progressChartRef.current);
    container.selectAll('*').remove();
    
    const width = progressChartRef.current.clientWidth;
    const height = 250;
    
    const svg = container
      .append('svg')
      .attr('width', width)
      .attr('height', height);
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
    const departments = [...new Set(tasks.map(t => t.department))];
    const data = departments.map(dept => {
      const deptTasks = tasks.filter(t => t.department === dept);
      const completed = deptTasks.filter(t => t.status === 'completed').length;
      const total = deptTasks.length;
      const progress = total > 0 ? (completed / total * 100) : 0;
      
      return {
        department: dept,
        progress,
        completed,
        total,
        color: tasks.find(t => t.department === dept)?.departmentColor || colors.primary
      };
    }).sort((a, b) => b.progress - a.progress);
    
    const margin = { top: 20, right: 30, bottom: 40, left: 120 };
    
    const xScale = d3.scaleLinear()
      .domain([0, 100])
      .range([margin.left, width - margin.right]);
    
    const yScale = d3.scaleBand()
      .domain(data.map(d => d.department))
      .range([margin.top, height - margin.bottom])
      .padding(0.3);
    
    // –§–æ–Ω–æ–≤—ã–µ –ª–∏–Ω–∏–∏
    svg.append('g')
      .selectAll('line')
      .data([25, 50, 75, 100])
      .enter()
      .append('line')
      .attr('x1', d => xScale(d))
      .attr('x2', d => xScale(d))
      .attr('y1', margin.top)
      .attr('y2', height - margin.bottom)
      .style('stroke', colors.border)
      .style('stroke-dasharray', '3,3')
      .style('opacity', 0.5);
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
    const bars = svg.selectAll('.progress-bar')
      .data(data)
      .enter()
      .append('g')
      .attr('class', 'progress-bar');
    
    // –§–æ–Ω–æ–≤—ã–π –±–∞—Ä
    bars.append('rect')
      .attr('x', margin.left)
      .attr('y', d => yScale(d.department))
      .attr('width', width - margin.left - margin.right)
      .attr('height', yScale.bandwidth())
      .attr('fill', colors.border)
      .attr('opacity', 0.2)
      .attr('rx', yScale.bandwidth() / 2);
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å
    bars.append('rect')
      .attr('x', margin.left)
      .attr('y', d => yScale(d.department))
      .attr('width', 0)
      .attr('height', yScale.bandwidth())
      .attr('fill', d => d.color)
      .attr('rx', yScale.bandwidth() / 2)
      .transition()
      .duration(1000)
      .delay((d, i) => i * 100)
      .attr('width', d => xScale(d.progress) - margin.left);
    
    // –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã
    bars.append('text')
      .attr('x', margin.left - 10)
      .attr('y', d => yScale(d.department) + yScale.bandwidth() / 2)
      .attr('text-anchor', 'end')
      .attr('alignment-baseline', 'middle')
      .style('fill', colors.text)
      .style('font-size', '14px')
      .style('font-weight', '500')
      .text(d => d.department);
    
    // –ó–Ω–∞—á–µ–Ω–∏—è
    bars.append('text')
      .attr('x', d => xScale(d.progress) + 5)
      .attr('y', d => yScale(d.department) + yScale.bandwidth() / 2)
      .attr('alignment-baseline', 'middle')
      .style('fill', colors.text)
      .style('font-size', '12px')
      .style('font-weight', '600')
      .style('opacity', 0)
      .transition()
      .duration(1000)
      .delay((d, i) => i * 100 + 500)
      .style('opacity', 1)
      .text(d => `${d.progress.toFixed(0)}% (${d.completed}/${d.total})`);
  };
  
  // –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
  const renderPieChart = () => {
    if (!pieChartRef.current) return;
    
    const container = d3.select(pieChartRef.current);
    container.selectAll('*').remove();
    
    const width = pieChartRef.current.clientWidth;
    const height = 250;
    const radius = Math.min(width, height) / 2 - 40;
    
    const svg = container
      .append('svg')
      .attr('width', width)
      .attr('height', height);
    
    const g = svg.append('g')
      .attr('transform', `translate(${width / 2},${height / 2})`);
    
    const data = tabs.map(tab => ({
      name: tab.name,
      value: statistics[tab.id],
      color: tab.color
    }));
    
    const pie = d3.pie()
      .value(d => d.value)
      .sort(null);
    
    const arc = d3.arc()
      .innerRadius(radius * 0.6)
      .outerRadius(radius);
    
    const arcs = g.selectAll('.arc')
      .data(pie(data))
      .enter()
      .append('g')
      .attr('class', 'arc');
    
    arcs.append('path')
      .attr('d', arc)
      .style('fill', d => d.data.color)
      .style('opacity', 0.8)
      .style('stroke', colors.cardBg)
      .style('stroke-width', 2)
      .transition()
      .duration(1000)
      .attrTween('d', function(d) {
        const interpolate = d3.interpolate({ startAngle: 0, endAngle: 0 }, d);
        return function(t) {
          return arc(interpolate(t));
        };
      });
    
    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    g.append('text')
      .attr('text-anchor', 'middle')
      .attr('dy', '-0.5em')
      .style('font-size', '32px')
      .style('font-weight', 'bold')
      .style('fill', colors.text)
      .text(statistics.total);
    
    g.append('text')
      .attr('text-anchor', 'middle')
      .attr('dy', '1.5em')
      .style('font-size', '14px')
      .style('fill', colors.textSecondary)
      .text('–í—Å–µ–≥–æ –∑–∞–¥–∞—á');
    
    // –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    g.append('text')
      .attr('text-anchor', 'middle')
      .attr('dy', '3.5em')
      .style('font-size', '18px')
      .style('font-weight', '600')
      .style('fill', colors.success)
      .text(`${statistics.completionRate}%`);
  };
  
  // –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
  const renderBarChart = () => {
    if (!chartRef.current) return;
    
    const container = d3.select(chartRef.current);
    container.selectAll('*').remove();
    
    const width = chartRef.current.clientWidth;
    const height = 300;
    const margin = { top: 40, right: 30, bottom: 60, left: 60 };
    
    const svg = container
      .append('svg')
      .attr('width', width)
      .attr('height', height);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    svg.append('text')
      .attr('x', width / 2)
      .attr('y', 20)
      .attr('text-anchor', 'middle')
      .style('font-size', '16px')
      .style('font-weight', '600')
      .style('fill', colors.text)
      .text('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º');
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    const priorities = ['low', 'medium', 'high', 'critical'];
    const priorityNames = {
      low: '–ù–∏–∑–∫–∏–π',
      medium: '–°—Ä–µ–¥–Ω–∏–π',
      high: '–í—ã—Å–æ–∫–∏–π',
      critical: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
    };
    
    const data = priorities.map(priority => {
      const priorityTasks = tasks.filter(t => t.priority === priority);
      const completed = priorityTasks.filter(t => t.status === 'completed').length;
      const onTime = priorityTasks.filter(t => t.status === 'completed' && t.deviation <= 0).length;
      
      return {
        priority: priorityNames[priority],
        total: priorityTasks.length,
        completed,
        onTime,
        delayed: completed - onTime,
        completionRate: priorityTasks.length > 0 ? (completed / priorityTasks.length * 100) : 0
      };
    });
    
    const xScale = d3.scaleBand()
      .domain(data.map(d => d.priority))
      .range([margin.left, width - margin.right])
      .padding(0.3);
    
    const yScale = d3.scaleLinear()
      .domain([0, d3.max(data, d => d.total)])
      .nice()
      .range([height - margin.bottom, margin.top]);
    
    // –û—Å–∏
    svg.append('g')
      .attr('transform', `translate(0,${height - margin.bottom})`)
      .call(d3.axisBottom(xScale))
      .style('color', colors.textSecondary);
    
    svg.append('g')
      .attr('transform', `translate(${margin.left},0)`)
      .call(d3.axisLeft(yScale))
      .style('color', colors.textSecondary);
    
    // –ì—Ä—É–ø–ø—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    const barGroups = svg.selectAll('.bar-group')
      .data(data)
      .enter()
      .append('g')
      .attr('class', 'bar-group');
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    barGroups.append('rect')
      .attr('x', d => xScale(d.priority))
      .attr('y', height - margin.bottom)
      .attr('width', xScale.bandwidth())
      .attr('height', 0)
      .attr('fill', colors.border)
      .attr('opacity', 0.3)
      .attr('rx', 4)
      .transition()
      .duration(800)
      .attr('y', d => yScale(d.total))
      .attr('height', d => height - margin.bottom - yScale(d.total));
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤–æ–≤—Ä–µ–º—è
    barGroups.append('rect')
      .attr('x', d => xScale(d.priority))
      .attr('y', height - margin.bottom)
      .attr('width', xScale.bandwidth())
      .attr('height', 0)
      .attr('fill', colors.success)
      .attr('opacity', 0.8)
      .attr('rx', 4)
      .transition()
      .duration(800)
      .delay(200)
      .attr('y', d => yScale(d.onTime))
      .attr('height', d => height - margin.bottom - yScale(d.onTime));
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    barGroups.append('rect')
      .attr('x', d => xScale(d.priority))
      .attr('y', height - margin.bottom)
      .attr('width', xScale.bandwidth())
      .attr('height', 0)
      .attr('fill', colors.warning)
      .attr('opacity', 0.8)
      .attr('rx', 4)
      .transition()
      .duration(800)
      .delay(400)
      .attr('y', d => yScale(d.onTime + d.delayed))
      .attr('height', d => height - margin.bottom - yScale(d.delayed));
    
    // –ó–Ω–∞—á–µ–Ω–∏—è
    barGroups.append('text')
      .attr('x', d => xScale(d.priority) + xScale.bandwidth() / 2)
      .attr('y', d => yScale(d.total) - 5)
      .attr('text-anchor', 'middle')
      .style('fill', colors.text)
      .style('font-size', '14px')
      .style('font-weight', '600')
      .style('opacity', 0)
      .transition()
      .duration(800)
      .delay(600)
      .style('opacity', 1)
      .text(d => d.total);
    
    // –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    barGroups.append('text')
      .attr('x', d => xScale(d.priority) + xScale.bandwidth() / 2)
      .attr('y', height - margin.bottom + 20)
      .attr('text-anchor', 'middle')
      .style('fill', colors.success)
      .style('font-size', '12px')
      .style('font-weight', '600')
      .style('opacity', 0)
      .transition()
      .duration(800)
      .delay(800)
      .style('opacity', 1)
      .text(d => `${d.completionRate.toFixed(0)}%`);
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const getPriorityBadge = (priority) => {
    const config = {
      critical: { color: colors.error, icon: <Zap size={12} />, text: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π' },
      high: { color: colors.warning, icon: <AlertTriangle size={12} />, text: '–í—ã—Å–æ–∫–∏–π' },
      medium: { color: colors.info, icon: <Activity size={12} />, text: '–°—Ä–µ–¥–Ω–∏–π' },
      low: { color: colors.textSecondary, icon: <Target size={12} />, text: '–ù–∏–∑–∫–∏–π' }
    };
    
    const { color, icon, text } = config[priority] || config.medium;
    
    return (
      <span 
        className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium"
        style={{
          backgroundColor: color + '20',
          color: color
        }}
      >
        {icon}
        {text}
      </span>
    );
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
  const getVelocityIndicator = (velocity) => {
    if (velocity === 'fast') {
      return <TrendingUp size={14} style={{ color: colors.success }} />;
    } else if (velocity === 'slow') {
      return <TrendingDown size={14} style={{ color: colors.error }} />;
    }
    return <Activity size={14} style={{ color: colors.info }} />;
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
  const departments = [...new Set(tasks.map(t => ({ 
    id: t.departmentId, 
    name: t.department, 
    color: t.departmentColor,
    icon: t.departmentIcon 
  })))]
    .filter((dept, index, self) => self.findIndex(d => d.id === dept.id) === index);
  
  // –†–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–±–∞
  const renderTable = () => {
    if (activeTab === 'completed') {
      return (
        <table className="w-full">
          <thead>
            <tr style={{ borderBottom: `2px solid ${colors.border}` }}>
              <th className="text-left py-3 px-4 font-medium cursor-pointer hover:bg-opacity-5 hover:bg-gray-500"
                  style={{ color: colors.textSecondary }}
                  onClick={() => handleSort('id')}>
                <div className="flex items-center gap-2">
                  ID
                  <ArrowUpDown size={14} />
                </div>
              </th>
              <th className="text-left py-3 px-4 font-medium cursor-pointer hover:bg-opacity-5 hover:bg-gray-500"
                  style={{ color: colors.textSecondary }}
                  onClick={() => handleSort('name')}>
                <div className="flex items-center gap-2">
                  –ó–∞–¥–∞—á–∞
                  <ArrowUpDown size={14} />
                </div>
              </th>
              <th className="text-left py-3 px-4 font-medium"
                  style={{ color: colors.textSecondary }}>
                –û—Ç–¥–µ–ª
              </th>
              <th className="text-left py-3 px-4 font-medium"
                  style={{ color: colors.textSecondary }}>
                –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
              </th>
              <th className="text-center py-3 px-4 font-medium"
                  style={{ color: colors.textSecondary }}>
                –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
              </th>
              <th className="text-center py-3 px-4 font-medium"
                  style={{ color: colors.textSecondary }}>
                –ó–∞–≤–µ—Ä—à–µ–Ω–æ
              </th>
              <th className="text-center py-3 px-4 font-medium"
                  style={{ color: colors.textSecondary }}>
                –†–µ–∑—É–ª—å—Ç–∞—Ç
              </th>
            </tr>
          </thead>
          <tbody>
            {filteredTasks.map((task, index) => (
              <motion.tr
                key={task.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.02 }}
                className="border-t hover:bg-opacity-5 hover:bg-gray-500 transition-colors"
                style={{ borderColor: colors.border }}
              >
                <td className="py-3 px-4">
                  <span className="font-mono text-sm" style={{ color: colors.text }}>
                    {task.id}
                  </span>
                </td>
                <td className="py-3 px-4">
                  <div>
                    <p className="font-medium" style={{ color: colors.text }}>
                      {task.name}
                    </p>
                    <p className="text-xs mt-1" style={{ color: colors.textSecondary }}>
                      –ü–ª–∞–Ω: {task.plannedStart} - {task.plannedEnd} ({task.duration}—á)
                    </p>
                  </div>
                </td>
                <td className="py-3 px-4">
                  <div className="flex items-center gap-2">
                    <div style={{ color: task.departmentColor }}>
                      {task.departmentIcon}
                    </div>
                    <span style={{ color: colors.text }}>{task.department}</span>
                  </div>
                </td>
                <td className="py-3 px-4">
                  <div className="flex items-center gap-2">
                    <span className="text-xl">{task.executorAvatar}</span>
                    <div>
                      <p style={{ color: colors.text }}>{task.executor}</p>
                      <div className="flex items-center gap-1">
                        {Array.from({ length: 5 }, (_, i) => (
                          <Award 
                            key={i} 
                            size={10} 
                            style={{ 
                              color: i < Math.floor(task.executorRating) ? colors.warning : colors.border,
                              fill: i < Math.floor(task.executorRating) ? colors.warning : 'none'
                            }} 
                          />
                        ))}
                      </div>
                    </div>
                  </div>
                </td>
                <td className="py-3 px-4 text-center">
                  {getPriorityBadge(task.priority)}
                </td>
                <td className="py-3 px-4 text-center">
                  <div className="flex items-center justify-center gap-2">
                    <CheckCircle size={16} style={{ color: colors.success }} />
                    <span className="text-sm" style={{ color: colors.text }}>
                      {task.completedDate}
                    </span>
                  </div>
                </td>
                <td className="py-3 px-4 text-center">
                  {task.deviation <= 0 ? (
                    <div className="flex items-center justify-center gap-1">
                      <Sparkles size={16} style={{ color: colors.success }} />
                      <span className="text-sm font-medium" style={{ color: colors.success }}>
                        –í–æ–≤—Ä–µ–º—è
                      </span>
                    </div>
                  ) : (
                    <span 
                      className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium"
                      style={{
                        backgroundColor: colors.warning + '20',
                        color: colors.warning
                      }}
                    >
                      <Clock size={12} />
                      +{task.deviation}—á
                    </span>
                  )}
                </td>
              </motion.tr>
            ))}
          </tbody>
        </table>
      );
    }
    
    if (activeTab === 'inProgress') {
      return (
        <table className="w-full">
          <thead>
            <tr style={{ borderBottom: `2px solid ${colors.border}` }}>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>ID</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ó–∞–¥–∞—á–∞</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–û—Ç–¥–µ–ª</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</th>
              <th className="text-center py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
              <th className="text-center py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ü—Ä–æ–≥—Ä–µ—Å—Å</th>
              <th className="text-center py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–°–∫–æ—Ä–æ—Å—Ç—å</th>
              <th className="text-center py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ü—Ä–æ–≥–Ω–æ–∑</th>
            </tr>
          </thead>
          <tbody>
            {filteredTasks.map((task, index) => (
              <motion.tr
                key={task.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.02 }}
                className="border-t hover:bg-opacity-5 hover:bg-gray-500 transition-colors"
                style={{ borderColor: colors.border }}
              >
                <td className="py-3 px-4">
                  <span className="font-mono text-sm" style={{ color: colors.text }}>{task.id}</span>
                </td>
                <td className="py-3 px-4">
                  <div>
                    <p className="font-medium" style={{ color: colors.text }}>{task.name}</p>
                    <p className="text-xs mt-1" style={{ color: colors.textSecondary }}>
                      –ù–∞—á–∞—Ç–æ: {task.actualStart} | –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {task.startedBy}
                    </p>
                  </div>
                </td>
                <td className="py-3 px-4">
                  <div className="flex items-center gap-2">
                    <div style={{ color: task.departmentColor }}>
                      {task.departmentIcon}
                    </div>
                    <span style={{ color: colors.text }}>{task.department}</span>
                  </div>
                </td>
                <td className="py-3 px-4">
                  <div className="flex items-center gap-2">
                    <span className="text-xl">{task.executorAvatar}</span>
                    <div>
                      <p style={{ color: colors.text }}>{task.executor}</p>
                      <div className="flex items-center gap-1">
                        {Array.from({ length: 5 }, (_, i) => (
                          <Award 
                            key={i} 
                            size={10} 
                            style={{ 
                              color: i < Math.floor(task.executorRating) ? colors.warning : colors.border,
                              fill: i < Math.floor(task.executorRating) ? colors.warning : 'none'
                            }} 
                          />
                        ))}
                      </div>
                    </div>
                  </div>
                </td>
                <td className="py-3 px-4 text-center">
                  {getPriorityBadge(task.priority)}
                </td>
                <td className="py-3 px-4">
                  <div className="flex items-center gap-3">
                    <div className="flex-1">
                      <div className="relative w-full h-2 rounded-full overflow-hidden" style={{ backgroundColor: colors.border }}>
                        <motion.div 
                          className="absolute top-0 left-0 h-full rounded-full"
                          style={{ 
                            background: `linear-gradient(90deg, ${colors.info} 0%, ${colors.cyan} 100%)`,
                            boxShadow: `0 0 10px ${colors.info}40`
                          }}
                          initial={{ width: 0 }}
                          animate={{ width: `${task.progress}%` }}
                          transition={{ duration: 1, delay: index * 0.05 }}
                        />
                      </div>
                    </div>
                    <span className="text-sm font-medium min-w-[40px] text-right" style={{ color: colors.text }}>
                      {task.progress}%
                    </span>
                  </div>
                </td>
                <td className="py-3 px-4 text-center">
                  <div className="flex items-center justify-center gap-1">
                    {getVelocityIndicator(task.velocity)}
                    <span className="text-sm" style={{ color: colors.textSecondary }}>
                      {task.velocity === 'fast' ? '–ë—ã—Å—Ç—Ä–æ' : 
                       task.velocity === 'slow' ? '–ú–µ–¥–ª–µ–Ω–Ω–æ' : '–ù–æ—Ä–º–∞–ª—å–Ω–æ'}
                    </span>
                  </div>
                </td>
                <td className="py-3 px-4 text-center">
                  <div className="flex items-center justify-center gap-2">
                    <CalendarDays size={16} style={{ color: colors.textSecondary }} />
                    <span className="text-sm" style={{ color: colors.text }}>
                      {task.estimatedCompletion}
                    </span>
                  </div>
                </td>
              </motion.tr>
            ))}
          </tbody>
        </table>
      );
    }
    
    if (activeTab === 'waiting') {
      return (
        <table className="w-full">
          <thead>
            <tr style={{ borderBottom: `2px solid ${colors.border}` }}>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>ID</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ó–∞–¥–∞—á–∞</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–û—Ç–¥–µ–ª</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</th>
              <th className="text-center py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ü—Ä–∏—á–∏–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è</th>
              <th className="text-center py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {filteredTasks.map((task, index) => (
              <motion.tr
                key={task.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.02 }}
                className="border-t hover:bg-opacity-5 hover:bg-gray-500 transition-colors"
                style={{ borderColor: colors.border }}
              >
                <td className="py-3 px-4">
                  <span className="font-mono text-sm" style={{ color: colors.text }}>{task.id}</span>
                </td>
                <td className="py-3 px-4">
                  <div>
                    <p className="font-medium" style={{ color: colors.text }}>{task.name}</p>
                    <p className="text-xs mt-1" style={{ color: colors.textSecondary }}>
                      –ü–ª–∞–Ω: {task.plannedStart} - {task.plannedEnd}
                    </p>
                  </div>
                </td>
                <td className="py-3 px-4">
                  <div className="flex items-center gap-2">
                    <div style={{ color: task.departmentColor }}>
                      {task.departmentIcon}
                    </div>
                    <span style={{ color: colors.text }}>{task.department}</span>
                  </div>
                </td>
                <td className="py-3 px-4">
                  <div className="flex items-center gap-2">
                    <span className="text-xl">{task.executorAvatar}</span>
                    <span style={{ color: colors.text }}>{task.executor}</span>
                  </div>
                </td>
                <td className="py-3 px-4 text-center">
                  {getPriorityBadge(task.priority)}
                </td>
                <td className="py-3 px-4">
                  <div className="flex items-center gap-2">
                    <PauseCircle size={16} style={{ color: colors.warning }} />
                    <span style={{ color: colors.text }}>{task.waitingReason}</span>
                  </div>
                </td>
                <td className="py-3 px-4 text-center">
                  <div 
                    className="inline-flex items-center gap-1 px-3 py-1.5 rounded-lg text-sm font-medium"
                    style={{
                      backgroundColor: colors.warning + '10',
                      border: `1px solid ${colors.warning}30`,
                      color: colors.warning
                    }}
                  >
                    <Clock size={14} />
                    {task.waitingDays} –¥–Ω. —Å {task.blockedSince}
                  </div>
                </td>
              </motion.tr>
            ))}
          </tbody>
        </table>
      );
    }
    
    if (activeTab === 'problems') {
      return (
        <table className="w-full">
          <thead>
            <tr style={{ borderBottom: `2px solid ${colors.border}` }}>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>ID</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ó–∞–¥–∞—á–∞</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–û—Ç–¥–µ–ª</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</th>
              <th className="text-center py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å</th>
              <th className="text-left py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ü—Ä–æ–±–ª–µ–º–∞</th>
              <th className="text-center py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–ü–æ–ø—ã—Ç–∫–∏</th>
              <th className="text-center py-3 px-4 font-medium" style={{ color: colors.textSecondary }}>–í—Ä–µ–º—è —Å–±–æ—è</th>
            </tr>
          </thead>
          <tbody>
            {filteredTasks.map((task, index) => (
              <motion.tr
                key={task.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.02 }}
                className="border-t hover:bg-opacity-5 hover:bg-gray-500 transition-colors"
                style={{ borderColor: colors.border }}
              >
                <td className="py-3 px-4">
                  <span className="font-mono text-sm" style={{ color: colors.text }}>{task.id}</span>
                </td>
                <td className="py-3 px-4">
                  <div>
                    <p className="font-medium" style={{ color: colors.text }}>{task.name}</p>
                    <div className="flex items-center gap-4 mt-1">
                      <div className="flex items-center gap-1">
                        <div className="w-full h-1 rounded-full overflow-hidden bg-gray-200" style={{ width: '60px' }}>
                          <div 
                            className="h-full"
                            style={{ 
                              width: `${task.progress}%`,
                              backgroundColor: colors.error
                            }}
                          />
                        </div>
                        <span className="text-xs" style={{ color: colors.textSecondary }}>{task.progress}%</span>
                      </div>
                      <span className="text-xs" style={{ color: colors.textSecondary }}>
                        –ü–ª–∞–Ω: {task.plannedEnd}
                      </span>
                    </div>
                  </div>
                </td>
                <td className="py-3 px-4">
                  <div className="flex items-center gap-2">
                    <div style={{ color: task.departmentColor }}>
                      {task.departmentIcon}
                    </div>
                    <span style={{ color: colors.text }}>{task.department}</span>
                  </div>
                </td>
                <td className="py-3 px-4">
                  <div className="flex items-center gap-2">
                    <span className="text-xl">{task.executorAvatar}</span>
                    <span style={{ color: colors.text }}>{task.executor}</span>
                  </div>
                </td>
                <td className="py-3 px-4 text-center">
                  <span 
                    className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium"
                    style={{
                      backgroundColor: task.problemSeverity === 'critical' ? colors.error + '20' :
                                     task.problemSeverity === 'high' ? colors.warning + '20' :
                                     colors.info + '20',
                      color: task.problemSeverity === 'critical' ? colors.error :
                             task.problemSeverity === 'high' ? colors.warning :
                             colors.info
                    }}
                  >
                    {task.problemSeverity === 'critical' && <AlertTriangle size={12} />}
                    {task.problemSeverity === 'critical' ? '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è' :
                     task.problemSeverity === 'high' ? '–í—ã—Å–æ–∫–∞—è' : '–°—Ä–µ–¥–Ω—è—è'}
                  </span>
                </td>
                <td className="py-3 px-4">
                  <div>
                    <div className="flex items-center gap-2 mb-1">
                      {task.problemType === 'error' && <XCircle size={16} style={{ color: colors.error }} />}
                      {task.problemType === 'blocked' && <AlertTriangle size={16} style={{ color: colors.warning }} />}
                      {task.problemType === 'failed' && <XOctagon size={16} style={{ color: colors.error }} />}
                      {task.problemType === 'timeout' && <Clock size={16} style={{ color: colors.warning }} />}
                      <span className="font-medium" style={{ color: colors.text }}>{task.statusName}</span>
                    </div>
                    <p className="text-xs" style={{ color: colors.textSecondary }}>{task.problemDescription}</p>
                  </div>
                </td>
                <td className="py-3 px-4 text-center">
                  <div className="flex items-center justify-center gap-1">
                    {Array.from({ length: task.attempts }, (_, i) => (
                      <div 
                        key={i}
                        className="w-2 h-2 rounded-full"
                        style={{ backgroundColor: colors.error }}
                      />
                    ))}
                  </div>
                </td>
                <td className="py-3 px-4 text-center">
                  <span 
                    className="inline-flex items-center gap-1 px-2 py-1 rounded-lg text-xs font-medium"
                    style={{
                      backgroundColor: colors.error + '10',
                      border: `1px solid ${colors.error}30`,
                      color: colors.error
                    }}
                  >
                    <AlertCircle size={12} />
                    {task.failedAt}
                  </span>
                </td>
              </motion.tr>
            ))}
          </tbody>
        </table>
      );
    }
  };
  
  return (
    <div className="min-h-screen p-4 md:p-6" style={{ backgroundColor: colors.background }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
      <motion.div 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-6"
      >
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold mb-2 flex items-center gap-3" style={{ color: colors.text }}>
              {t('title')}
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
              >
                <Activity size={24} style={{ color: colors.primary }} />
              </motion.div>
            </h1>
    <p className="text-sm" style={{ color: colors.textSecondary }}>
             –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∑–∞–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–∏–æ–¥–∞ ‚Ä¢ {new Date().toLocaleDateString(currentLocale)}
           </p>
         </div>
         
         <motion.button
           whileHover={{ scale: 1.05 }}
           whileTap={{ scale: 0.95 }}
           onClick={() => setShowStats(!showStats)}
           className="px-4 py-2 rounded-lg flex items-center gap-2"
           style={{ 
             backgroundColor: colors.cardBg,
             border: `1px solid ${colors.border}`,
             color: colors.text
           }}
         >
           <BarChart3 size={16} />
           {showStats ? '–°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' : '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'}
         </motion.button>
       </div>
     </motion.div>
     
     {/* –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
     <AnimatePresence>
       {showStats && (
         <motion.div
           initial={{ opacity: 0, height: 0 }}
           animate={{ opacity: 1, height: 'auto' }}
           exit={{ opacity: 0, height: 0 }}
           className="mb-6 overflow-hidden"
         >
           <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
             <motion.div
               initial={{ opacity: 0, scale: 0.9 }}
               animate={{ opacity: 1, scale: 1 }}
               className="p-4 rounded-xl relative overflow-hidden"
               style={{ 
                 background: `linear-gradient(135deg, ${colors.primary}20 0%, ${colors.primary}10 100%)`,
                 border: `1px solid ${colors.primary}30`
               }}
             >
               <div className="relative z-10">
                 <div className="flex items-center justify-between mb-2">
                   <Target size={20} style={{ color: colors.primary }} />
                   <span className="text-2xl font-bold" style={{ color: colors.text }}>
                     {statistics.completionRate}%
                   </span>
                 </div>
                 <p className="text-sm font-medium" style={{ color: colors.text }}>
                   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
                 </p>
                 <p className="text-xs mt-1" style={{ color: colors.textSecondary }}>
                   {statistics.completed} –∏–∑ {statistics.total}
                 </p>
               </div>
               <motion.div
                 className="absolute bottom-0 left-0 right-0 h-1"
                 style={{ backgroundColor: colors.primary }}
                 initial={{ width: 0 }}
                 animate={{ width: `${statistics.completionRate}%` }}
                 transition={{ duration: 1, delay: 0.5 }}
               />
             </motion.div>
             
             <motion.div
               initial={{ opacity: 0, scale: 0.9 }}
               animate={{ opacity: 1, scale: 1 }}
               transition={{ delay: 0.1 }}
               className="p-4 rounded-xl"
               style={{ 
                 background: `linear-gradient(135deg, ${colors.success}20 0%, ${colors.success}10 100%)`,
                 border: `1px solid ${colors.success}30`
               }}
             >
               <div className="flex items-center justify-between mb-2">
                 <Zap size={20} style={{ color: colors.success }} />
                 <span className="text-2xl font-bold" style={{ color: colors.text }}>
                   {statistics.performanceScore}%
                 </span>
               </div>
               <p className="text-sm font-medium" style={{ color: colors.text }}>
                 –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
               </p>
               <p className="text-xs mt-1" style={{ color: colors.textSecondary }}>
                 –ó–∞–¥–∞—á–∏ –±–µ–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
               </p>
             </motion.div>
             
             <motion.div
               initial={{ opacity: 0, scale: 0.9 }}
               animate={{ opacity: 1, scale: 1 }}
               transition={{ delay: 0.2 }}
               className="p-4 rounded-xl"
               style={{ 
                 background: `linear-gradient(135deg, ${colors.warning}20 0%, ${colors.warning}10 100%)`,
                 border: `1px solid ${colors.warning}30`
               }}
             >
               <div className="flex items-center justify-between mb-2">
                 <Clock size={20} style={{ color: colors.warning }} />
                 <span className="text-2xl font-bold" style={{ color: colors.text }}>
                   {Math.round(statistics.avgDeviation)}—á
                 </span>
               </div>
               <p className="text-sm font-medium" style={{ color: colors.text }}>
                 –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
               </p>
               <p className="text-xs mt-1" style={{ color: colors.textSecondary }}>
                 –ü–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
               </p>
             </motion.div>
             
             <motion.div
               initial={{ opacity: 0, scale: 0.9 }}
               animate={{ opacity: 1, scale: 1 }}
               transition={{ delay: 0.3 }}
               className="p-4 rounded-xl"
               style={{ 
                 background: `linear-gradient(135deg, ${colors.error}20 0%, ${colors.error}10 100%)`,
                 border: `1px solid ${colors.error}30`
               }}
             >
               <div className="flex items-center justify-between mb-2">
                 <AlertTriangle size={20} style={{ color: colors.error }} />
                 <span className="text-2xl font-bold" style={{ color: colors.text }}>
                   {statistics.criticalTasks}
                 </span>
               </div>
               <p className="text-sm font-medium" style={{ color: colors.text }}>
                 –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
               </p>
               <p className="text-xs mt-1" style={{ color: colors.textSecondary }}>
                 –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è
               </p>
             </motion.div>
           </div>
           
           {/* –ì—Ä–∞—Ñ–∏–∫–∏ */}
           <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
             <motion.div
               initial={{ opacity: 0, y: 20 }}
               animate={{ opacity: 1, y: 0 }}
               transition={{ delay: 0.4 }}
               className="p-6 rounded-xl"
               style={{ backgroundColor: colors.cardBg, border: `1px solid ${colors.border}` }}
             >
               <h3 className="text-lg font-semibold mb-4" style={{ color: colors.text }}>
                 –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
               </h3>
               <div ref={progressChartRef} style={{ width: '100%', height: '250px' }} />
             </motion.div>
             
             <motion.div
               initial={{ opacity: 0, y: 20 }}
               animate={{ opacity: 1, y: 0 }}
               transition={{ delay: 0.5 }}
               className="p-6 rounded-xl"
               style={{ backgroundColor: colors.cardBg, border: `1px solid ${colors.border}` }}
             >
               <h3 className="text-lg font-semibold mb-4" style={{ color: colors.text }}>
                 –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
               </h3>
               <div ref={pieChartRef} style={{ width: '100%', height: '250px' }} />
             </motion.div>
             
             <motion.div
               initial={{ opacity: 0, y: 20 }}
               animate={{ opacity: 1, y: 0 }}
               transition={{ delay: 0.6 }}
               className="p-6 rounded-xl"
               style={{ backgroundColor: colors.cardBg, border: `1px solid ${colors.border}` }}
             >
               <div ref={chartRef} style={{ width: '100%', height: '300px' }} />
             </motion.div>
           </div>
         </motion.div>
       )}
     </AnimatePresence>
     
     {/* –°—Ç–∞—Ç—É—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
     <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
       {tabs.map((tab, index) => (
         <motion.div
           key={tab.id}
           initial={{ opacity: 0, y: 20 }}
           animate={{ opacity: 1, y: 0 }}
           transition={{ delay: index * 0.1 }}
           whileHover={{ 
             scale: 1.02,
             boxShadow: isDark ? '0 10px 30px rgba(0,0,0,0.3)' : '0 10px 30px rgba(0,0,0,0.1)'
           }}
           whileTap={{ scale: 0.98 }}
           className="relative cursor-pointer overflow-hidden rounded-xl"
           style={{ 
             background: activeTab === tab.id ? tab.bgGradient : colors.cardBg,
             border: `2px solid ${activeTab === tab.id ? tab.color : colors.border}`
           }}
           onClick={() => setActiveTab(tab.id)}
         >
           {/* –§–æ–Ω–æ–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è */}
           {activeTab === tab.id && (
             <motion.div
               className="absolute inset-0"
               initial={{ opacity: 0 }}
               animate={{ opacity: 0.1 }}
               style={{
                 background: `radial-gradient(circle at 50% 50%, ${tab.color} 0%, transparent 70%)`
               }}
             />
           )}
           
           <div className="relative z-10 p-5">
             <div className="flex items-center justify-between mb-3">
               <motion.div
                 animate={activeTab === tab.id ? { rotate: [0, 360] } : {}}
                 transition={{ duration: 2, repeat: activeTab === tab.id ? Infinity : 0, ease: "linear" }}
                 style={{ color: activeTab === tab.id ? '#ffffff' : tab.color }}
               >
                 {tab.icon}
               </motion.div>
               <span className="text-3xl font-bold" style={{ 
                 color: activeTab === tab.id ? '#ffffff' : colors.text 
               }}>
                 {statistics[tab.id]}
               </span>
             </div>
             <p className="text-sm font-medium mb-1" style={{ 
               color: activeTab === tab.id ? '#ffffff' : colors.text 
             }}>
               {tab.name}
             </p>
             <p className="text-xs" style={{ 
               color: activeTab === tab.id ? 'rgba(255,255,255,0.8)' : colors.textSecondary 
             }}>
               {tab.description}
             </p>
             
             {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
             <div className="mt-3 h-1 rounded-full overflow-hidden" style={{ 
               backgroundColor: activeTab === tab.id ? 'rgba(255,255,255,0.2)' : colors.border 
             }}>
               <motion.div
                 className="h-full rounded-full"
                 style={{ 
                   backgroundColor: activeTab === tab.id ? '#ffffff' : tab.color 
                 }}
                 initial={{ width: 0 }}
                 animate={{ width: `${(statistics[tab.id] / statistics.total * 100)}%` }}
                 transition={{ duration: 1, delay: index * 0.1 + 0.5 }}
               />
             </div>
           </div>
         </motion.div>
       ))}
     </div>
     
     {/* –§–∏–ª—å—Ç—Ä—ã */}
     <motion.div 
       initial={{ opacity: 0, y: 20 }}
       animate={{ opacity: 1, y: 0 }}
       transition={{ delay: 0.5 }}
       className="mb-6 p-4 rounded-xl"
       style={{ backgroundColor: colors.cardBg, border: `1px solid ${colors.border}` }}
     >
       <div className="flex flex-wrap gap-4 items-center">
         <div className="flex-1 min-w-[200px]">
           <div className="relative">
             <Search size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2" style={{ color: colors.textSecondary }} />
             <input
               type="text"
               placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º..."
               value={searchQuery}
               onChange={(e) => setSearchQuery(e.target.value)}
               className="w-full pl-10 pr-4 py-2.5 rounded-lg border transition-all"
               style={{ 
                 backgroundColor: colors.background,
                 borderColor: colors.border,
                 color: colors.text
               }}
             />
           </div>
         </div>
         
         <select
           value={selectedDepartment}
           onChange={(e) => setSelectedDepartment(e.target.value)}
           className="px-4 py-2.5 rounded-lg border cursor-pointer"
           style={{ 
             backgroundColor: colors.background,
             borderColor: colors.border,
             color: colors.text
           }}
         >
           <option value="all">–í—Å–µ –æ—Ç–¥–µ–ª—ã</option>
           {departments.map(dept => (
             <option key={dept.id} value={dept.id}>
               {dept.name}
             </option>
           ))}
         </select>
         
         <motion.button
           whileHover={{ scale: 1.05 }}
           whileTap={{ scale: 0.95 }}
           onClick={() => {
             const mockData = generateMockTasks();
             setTasks(mockData);
           }}
           className="px-4 py-2.5 rounded-lg flex items-center gap-2 font-medium"
           style={{ 
             backgroundColor: colors.primary,
             color: '#ffffff'
           }}
         >
           <RefreshCw size={16} />
           –û–±–Ω–æ–≤–∏—Ç—å
         </motion.button>
         
         <motion.button
           whileHover={{ scale: 1.05 }}
           whileTap={{ scale: 0.95 }}
           className="px-4 py-2.5 rounded-lg flex items-center gap-2 border font-medium"
           style={{ 
             borderColor: colors.border,
             color: colors.text
           }}
         >
           <Download size={16} />
           –≠–∫—Å–ø–æ—Ä—Ç
         </motion.button>
       </div>
     </motion.div>
     
     {/* –¢–∞–±–ª–∏—Ü–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
     <motion.div
       key={activeTab}
       initial={{ opacity: 0, x: -20 }}
       animate={{ opacity: 1, x: 0 }}
       transition={{ duration: 0.3 }}
       className="rounded-xl overflow-hidden"
       style={{ 
         backgroundColor: colors.cardBg, 
         border: `1px solid ${colors.border}`,
         boxShadow: isDark ? '0 4px 6px rgba(0,0,0,0.1)' : '0 4px 6px rgba(0,0,0,0.05)'
       }}
     >
       {isLoading ? (
         <div className="flex flex-col items-center justify-center py-20">
           <motion.div
             animate={{ rotate: 360 }}
             transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
           >
             <Loader2 size={48} style={{ color: colors.primary }} />
           </motion.div>
           <p className="mt-4 text-lg" style={{ color: colors.text }}>
             –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
           </p>
           <p className="text-sm mt-2" style={{ color: colors.textSecondary }}>
             –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ
           </p>
         </div>
       ) : filteredTasks.length === 0 ? (
         <div className="text-center py-20">
           <motion.div
             initial={{ scale: 0 }}
             animate={{ scale: 1 }}
             transition={{ type: "spring", stiffness: 200 }}
           >
             <Search size={64} style={{ color: colors.textSecondary, margin: '0 auto', opacity: 0.5 }} />
           </motion.div>
           <p className="text-lg mt-4 mb-2" style={{ color: colors.text }}>
             –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
           </p>
           <p className="text-sm" style={{ color: colors.textSecondary }}>
             –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
           </p>
         </div>
       ) : (
         <div className="overflow-x-auto">
           {renderTable()}
         </div>
       )}
     </motion.div>
   </div>
 );
}